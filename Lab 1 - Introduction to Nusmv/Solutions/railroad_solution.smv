MODULE train(signal)
    -- Model of the train
    VAR
        mode : {away, wait, bridge};
        out : {none, arrive, leave};
    ASSIGN
        init(mode) := away;
        out := case
            mode = away     : {none, arrive};
            mode = bridge   : {none, leave};
            TRUE            : none;
        esac;
        next(mode) := case
            mode = away & out = arrive      : wait;
            mode = wait & signal = green    : bridge;
            mode = bridge & out = leave     : away;
            TRUE                            : mode;
        esac;

MODULE controller(out_w, out_e)
    -- First model of the controller
    VAR
        west    : {green, red};
        east    : {green, red};
        near_w  : boolean;
        near_e  : boolean;
    ASSIGN
        init(near_w) := FALSE;
        init(near_e) := FALSE;
        next(near_w) := case
            out_w = arrive  : TRUE;
            out_w = leave   : FALSE;
            TRUE            : near_w;
        esac;
        next(near_e) := case
            out_e = arrive  : TRUE;
            out_e = leave   : FALSE;
            TRUE            : near_e;
        esac;
        
        init(west) := red;
        init(east) := red;
        next(west) := case
            !near_w             : red;
            next(east) = red    : green;
            TRUE                : west;
        esac;
        next(east) := case
            !near_e         : red;
            west = red      : green;
            TRUE            : east;
        esac;
    DEFINE
        signal_w := west;
        signal_e := east;
        
MODULE monitor(out_w, out_e, signal_w)
    -- Fairness monitor for the west train
    VAR
        mode    : 0..3;
    ASSIGN
        init(mode) := 0;
        next(mode) := case
            mode = 0 & out_w = arrive   : 1;
            mode = 1 & signal_w = green : 0;
            mode = 1 & out_e = leave    : 2;
            mode = 2 & signal_w = green : 0;
            mode = 2 & out_e = leave    : 3;
            TRUE                        : mode;
        esac;
    

MODULE main
    -- Composition of train_W, train_E and controller
    VAR
        train_w : train(contr.signal_w);
        train_e : train(contr.signal_e);
        contr   : controller(train_w.out, train_e.out);
        mon_w   : monitor(train_w.out, train_e.out, contr.signal_w);
        mon_e   : monitor(train_e.out, train_w.out, contr.signal_e);
        
INVARSPEC !(train_w.mode = bridge & train_e.mode = bridge)
INVARSPEC !(mon_w.mode = 3)
INVARSPEC !(mon_e.mode = 3)